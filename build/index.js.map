{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\nMongoClient = require 'mongodb'\r\n.MongoClient\r\nObjectId = require 'mongodb'\r\n.ObjectId\r\nasync = require 'async'\r\nminimatch = require 'minimatch'\r\ncrypto = require 'crypto'\r\ncryptojs = require 'crypto-js'\r\nalgorithm = 'aes-256-ctr'\r\nobjtrans = require 'objtrans'\r\nsettings = require './settings'\r\ns = require('underscore.string')\r\nDeepDiff = require 'deep-diff'\r\n.diff\r\nversion = require('../package.json').version\r\ndatabase = null\r\nndx = {}\r\nmaintenanceMode = false\r\nuseEncryption = false\r\nencryptIgnore = ['**._id']\r\ncallbacks =\r\n  ready: []\r\n  insert: []\r\n  update: []\r\n  select: []\r\n  delete: []\r\n  preInsert: []\r\n  preUpdate: []\r\n  preSelect: []\r\n  preDelete: []\r\n  selectTransform: []\r\n  serverSelectTransform: []\r\n  restore: []\r\nsyncCallback = (name, obj, cb) ->\r\n  if callbacks[name] and callbacks[name].length\r\n    for callback in callbacks[name]\r\n      callback obj\r\n  cb?()\r\nasyncCallback = (name, obj, cb) ->\r\n  truth = false\r\n  if callbacks[name] and callbacks[name].length\r\n    async.eachSeries callbacks[name], (cbitem, callback) ->\r\n      cbitem obj, (result) ->\r\n        truth = truth or result\r\n        callback()\r\n    , ->\r\n      cb? truth\r\n  else\r\n    cb? true\r\nencryptString = (str) ->\r\n  if str\r\n    return cryptojs.AES.encrypt(str, (settings.ENCRYPTION_KEY or settings.SESSION_SECRET)).toString()\r\n  return null\r\ndecryptString = (str) ->\r\n  if str\r\n    return cryptojs.AES.decrypt(str, (settings.ENCRYPTION_KEY or settings.SESSION_SECRET)).toString(cryptojs.enc.Utf8)\r\n  return ''\r\nencryptObj = (obj, path) ->\r\n  myobj = {}\r\n  for ignore in encryptIgnore\r\n    if minimatch path, ignore\r\n      return obj\r\n  type = Object.prototype.toString.call obj\r\n  if type is '[object Object]'\r\n    for key of obj\r\n      myobj[key] = encryptObj obj[key], \"#{path}.#{key}\"\r\n  else if type is '[object Boolean]'\r\n    return obj\r\n  else\r\n    return encryptString JSON.stringify obj\r\n  myobj\r\ndecryptObj = (obj, path) ->\r\n  for ignore in encryptIgnore\r\n    if minimatch path, ignore\r\n      return obj\r\n  type = Object.prototype.toString.call obj\r\n  if type is '[object Object]'\r\n    for key of obj\r\n      obj[key] = decryptObj obj[key], \"#{path}.#{key}\"\r\n  else if type is '[object Boolean]'\r\n    return obj\r\n  else\r\n    if not obj\r\n      return obj\r\n    return JSON.parse decryptString obj\r\n  obj\r\nencryptWhere = (obj, path) ->\r\n  type = Object.prototype.toString.call obj\r\n  for ignore in encryptIgnore\r\n    if minimatch path, ignore\r\n      return obj\r\n  if type is '[object Object]'\r\n    for key of obj\r\n      mypath = path\r\n      if key.indexOf('$') isnt 0\r\n        mypath = \"#{path}.#{key}\"\r\n      obj[key] = encryptWhere obj[key], mypath\r\n  else if type is '[object Boolean]'\r\n    return obj\r\n  else\r\n    return encryptString JSON.stringify obj\r\n  obj\r\ncleanObj = (obj) ->\r\n  for key of obj\r\n    type = Object.prototype.toString.call(obj[key])\r\n    if key.indexOf('$') is 0 or key is '#'\r\n      delete obj[key]\r\n    else if type is '[object Object]'\r\n      cleanObj obj[key]\r\n    ###\r\n    else if type is '[object Array]'\r\n      for arrObj, i in obj[key]\r\n        obj[key][i] = cleanObj obj[key][i]\r\n    ###\r\n  obj\r\nreadDiffs = (from, to, out) ->\r\n  diffs = DeepDiff from, to\r\n  out = out or {}\r\n  for dif in diffs\r\n    switch dif.kind\r\n      when 'E', 'N'\r\n        myout = out\r\n        mypath = dif.path.join('.')\r\n        good = true\r\n        if dif.lhs and dif.rhs and typeof(dif.lhs) isnt typeof(dif.rhs)\r\n          if dif.lhs.toString() is dif.rhs.toString()\r\n            good = false\r\n        if good\r\n          myout[mypath] ={}\r\n          myout = myout[mypath]\r\n          myout.from = dif.lhs\r\n          myout.to = dif.rhs\r\n  out\r\nunpack = (diffs, out) ->\r\n  out = out or {}\r\n  for key of diffs\r\n    bits = key.split /\\./g\r\n    myout = out\r\n    for bit, i in bits\r\n      if not myout[bit]\r\n        if i < bits.length - 1\r\n          myout[bit] = {}\r\n        else\r\n          myout[bit] = diffs[key]\r\n      myout = myout[bit]\r\n  out\r\nconvertWhere = (where) ->\r\n  walk = (base, current, route) ->\r\n    if current and current.hasOwnProperty('$like')\r\n      current.$regex = \".*#{current.$like or ''}.*\"\r\n      current.$options = 'i'\r\n      delete current.$like\r\n    for key of current\r\n      obj = current[key]\r\n      type = Object.prototype.toString.call obj\r\n      if type is '[object Object]'\r\n        if key.indexOf('$') is 0\r\n          walk obj, obj, ''\r\n        else\r\n          newroute = route\r\n          if newroute\r\n            newroute += '.'\r\n          newroute += key\r\n          walk current, obj, newroute\r\n      else if type is '[object Array]'\r\n        if obj.length and Object.prototype.toString.call(obj[0]) is '[object Object]'\r\n          for item in obj\r\n            item = walk item, item, ''\r\n      else\r\n        if key.indexOf('$') is 0\r\n          base[route][key] = obj\r\n        else if route\r\n          newroute = route + '.' + key\r\n          base[newroute] = obj\r\n          delete base[newroute.split(/\\./g)[0]]\r\n        else\r\n          if key is '_id' or newroute is '_id'\r\n            if obj\r\n              obj = new ObjectId obj\r\n            else\r\n              obj = new ObjectId 0x000000000000000000000000\r\n          base[key] = obj\r\n  walk where, where, ''\r\n  delete where['#']\r\n  where\r\nselect = (table, args, cb, isServer, user) ->\r\n  new Promise (resolve, reject) ->\r\n    skip = 0\r\n    limit = args.pageSize or 10\r\n    if hasPaging = args.page or args.pageSize\r\n      args.page = args.page or 1\r\n      skip = (args.page - 1) * limit\r\n      limit = args.pageSize\r\n    if ndx.cache && cacheResult = ndx.cache.get table, args, user or ndx.user\r\n      resolve cacheResults.output\r\n      return cb? cacheResult.output, cacheResult.total\r\n    ((user) ->\r\n      asyncCallback (if isServer then 'serverPreSelect' else 'preSelect'), \r\n        op: 'preSelect'\r\n        pre: true\r\n        table: table\r\n        args: args\r\n        user: user\r\n      , (result) ->\r\n        if not result\r\n          resolve \r\n            result: []\r\n            total: 0\r\n          return cb? [], 0\r\n        args = args or {}\r\n        ndx.user = user\r\n        myCb = (err, output, total) ->\r\n          ndx.user = user\r\n          if err\r\n            resolve\r\n              result: []\r\n              total: 0\r\n            return cb? [], 0\r\n          asyncCallback (if isServer then 'serverSelect' else 'select'), \r\n            op: 'select'\r\n            post: true\r\n            table: table\r\n            objs: output\r\n            isServer: isServer\r\n            user: user\r\n          , ->\r\n            ndx.user = user\r\n            total = total or output.length\r\n            if args.pageAfter and hasPaging\r\n              args.page = args.page or 1\r\n              args.pageSize = args.pageSize or 10\r\n              output = output.splice skip, limit\r\n            if useEncryption\r\n              for obj in output\r\n                obj = decryptObj obj, table\r\n            asyncCallback (if isServer then 'serverSelectTransform' else 'selectTransform'),\r\n              op: 'selectTransform'\r\n              transformer: args.transformer\r\n              table: table\r\n              objs: output\r\n              isServer: isServer\r\n              user: user\r\n            , ->\r\n              ndx.user = user\r\n              ndx.cache && ndx.cache.set table, args, user,\r\n                output: output\r\n                total: total\r\n              resolve \r\n                result: output\r\n                total: total\r\n              cb? output, total\r\n        collection = database.collection table\r\n        options = {}\r\n        sort = {}\r\n        if args.sort\r\n          if typeof args.sort is 'string'\r\n            sort[args.sort] = if args.sortDir is 'DESC' then -1 else 1\r\n          else\r\n            sort = args.sort\r\n        where = if args.where then args.where else args\r\n        where = convertWhere where\r\n        #if useEncryption\r\n        #  where = encryptWhere where, table\r\n        if args.aggregate\r\n          steps = []\r\n          steps.push\r\n            $match: where\r\n          group = \r\n            _id: '$' + args.aggregate\r\n          hasSort = false\r\n          if Object.keys(sort).length\r\n            hasSort = true\r\n            for key of sort\r\n              group[key] =\r\n                $first: '$' + key\r\n          steps.push\r\n            $group: group\r\n          if hasSort\r\n            steps.push\r\n              $sort: sort\r\n          ###3.4\r\n          steps.push\r\n            $count: 'total'\r\n          ###\r\n          result = await collection.aggregate steps\r\n          #3.4 total = (await result.toArray())[0].total\r\n          total = (await result.toArray()).length\r\n          #3.4 steps.splice steps.length - 1, 1\r\n          if not args.pageAfter and hasPaging\r\n            steps.push\r\n              $skip: skip\r\n            steps.push\r\n              $limit: limit\r\n          result = await collection.aggregate steps\r\n          items = []\r\n          for item in await result.toArray()\r\n            items.push if args.aggregateField and args.aggregateField is '_id' then ObjectId(item._id) else item._id\r\n          if args.aggregateWhere\r\n            where = args.aggregateWhere\r\n          where[args.aggregateField or args.aggregate] =\r\n            $in: items\r\n          if args.aggregateTable\r\n            collection = database.collection args.aggregateTable\r\n          result = await collection.find where, options\r\n          .sort sort\r\n          myCb null, (if args.totalOnly then [] else await result.toArray()), total\r\n        else\r\n          if not args.pageAfter and hasPaging\r\n            result = await collection.find where, options\r\n            .sort sort\r\n            .skip skip\r\n            .limit limit\r\n            myCb null, (if args.totalOnly then [] else await result.toArray()), await result.count()\r\n          else\r\n            result = await collection.find where, options\r\n            .sort sort\r\n            myCb null, await result.toArray()\r\n    )(user or ndx.user)\r\nselectOne = (table, args, cb, isServer, user) ->\r\n  output = (await select table, args, null, isServer, user).result\r\n  if output and output.length\r\n    return output[0]\r\n  else\r\n    return null\r\ncount = (table, whereObj, cb) ->\r\n  whereObj = convertWhere whereObj\r\n  collection = database.collection table\r\n  collection.count whereObj, (err, count) ->\r\n    cb? count\r\nupdate =  (table, obj, whereObj, cb, isServer, user) ->\r\n  whereObj = convertWhere whereObj\r\n  cleanObj obj \r\n  ((user) ->\r\n    collection = database.collection table\r\n    collection.find whereObj, {}\r\n    .toArray (err, oldItems) ->\r\n      if not err and oldItems\r\n        ids = []\r\n        async.each oldItems, (oldItem, diffCb) ->\r\n          if useEncryption\r\n            oldItem = decryptObj oldItem, table\r\n          diffs = readDiffs oldItem, unpack(obj)\r\n          newObj = {}\r\n          Object.assign newObj, oldItem\r\n          Object.assign newObj, obj\r\n          asyncCallback (if isServer then 'serverPreUpdate' else 'preUpdate'),\r\n            op: 'update'\r\n            pre: true\r\n            id: oldItem._id.toString()\r\n            table: table\r\n            where: whereObj\r\n            obj: obj\r\n            oldObj: oldItem\r\n            newObj: newObj\r\n            changes: diffs\r\n            user: user\r\n          , (result) ->\r\n            if not result\r\n              return diffCb()\r\n            ndx.cache && ndx.cache.reset table\r\n            ndx.user = user\r\n            id =oldItem._id.toString()\r\n            delete obj._id\r\n            collection.updateOne\r\n              _id: oldItem._id\r\n            ,\r\n              $set: if useEncryption then encryptObj(obj, table) else obj\r\n            , (err, result) ->\r\n              ndx.user = user\r\n              asyncCallback (if isServer then 'serverUpdate' else 'update'),\r\n                op: 'update'\r\n                post: true\r\n                id: id\r\n                table: table\r\n                obj: obj\r\n                oldObj: oldItem\r\n                newObj: newObj\r\n                changes: diffs\r\n                user: user\r\n                isServer: isServer\r\n              ids.push result.insertedId\r\n              diffCb()\r\n        , ->\r\n          cb? err,\r\n            op: 'update'\r\n            id: ids\r\n      else\r\n        cb? 'nothing to update',\r\n          op: 'update'\r\n          id: null      \r\n  )(user or ndx.user)\r\ninsert = (table, obj, cb, isServer, user) ->\r\n  cleanObj obj\r\n  ((user) ->\r\n    ndx.user = user\r\n    asyncCallback (if isServer then 'serverPreInsert' else 'preInsert'),\r\n      op: 'insert'\r\n      pre: true\r\n      table: table\r\n      obj: obj\r\n      user: user\r\n    , (result) ->\r\n      if not result\r\n        return cb? []\r\n      ndx.cache && ndx.cache.reset table\r\n      ndx.user = user\r\n      collection = database.collection table\r\n      if obj._id and Object.prototype.toString.call(obj._id) is '[object String]'\r\n        obj._id = new ObjectId(obj._id)\r\n      if Object.prototype.toString.call(obj) is '[object Array]'\r\n        async.each obj, (o, callback) ->\r\n          collection.insertOne (if useEncryption then encryptObj(o, table) else o)\r\n          , (err, r) ->\r\n            err and console.log 'insert error:', err\r\n            ndx.user = user\r\n            o._id = r.insertedId\r\n            asyncCallback (if isServer then 'serverInsert' else 'insert'),\r\n              op: 'insert'\r\n              post: true\r\n              id: o._id\r\n              table: table\r\n              obj: o\r\n              user: user\r\n              isServer: isServer\r\n            cb? err, \r\n              op: 'insert'\r\n              id: r.insertedId\r\n            callback()\r\n      else\r\n        collection.insertOne (if useEncryption then encryptObj(obj, table) else obj)\r\n        , (err, r) ->\r\n          err and console.log 'insert error:', err\r\n          ndx.user = user\r\n          obj._id = r.insertedId\r\n          asyncCallback (if isServer then 'serverInsert' else 'insert'),\r\n            op: 'insert'\r\n            post: true\r\n            id: obj._id\r\n            table: table\r\n            obj: obj\r\n            user: user\r\n            isServer: isServer\r\n          cb? err, \r\n            op: 'insert'\r\n            id: r.insertedId\r\n  )(user or ndx.user)\r\nupsert = (table, obj, whereObj, cb, isServer, user) ->\r\n  where = convertWhere JSON.parse JSON.stringify whereObj\r\n  if (not whereObj or JSON.stringify(whereObj) is '{}') and obj._id\r\n    whereObj = {}\r\n    whereObj._id = obj._id.toString()\r\n    where = convertWhere JSON.parse JSON.stringify whereObj\r\n  ((user) =>\r\n    if not whereObj or JSON.stringify(whereObj) is '{}'\r\n      return insert table, obj, cb, isServer, user\r\n    collection = database.collection table\r\n    collection.find where\r\n    .toArray (err, test) =>\r\n      if test and test.length\r\n        update table, obj, whereObj, cb, isServer, user\r\n      else\r\n        insert table, obj, cb, isServer, user\r\n    ###\r\n    if JSON.stringify(whereObj) isnt '{}'\r\n    ###\r\n  )(user or ndx.user)\r\ndel = (table, whereObj, cb, isServer, user) ->\r\n  whereObj = convertWhere whereObj\r\n  if useEncryption\r\n    where = encryptWhere where, table\r\n  ((user) ->\r\n    asyncCallback (if isServer then 'serverPreDelete' else 'preDelete'),\r\n      op: 'delete'\r\n      pre: true\r\n      table: table\r\n      where: whereObj\r\n      user: user\r\n    , (result) ->\r\n      if not result\r\n        cb? []\r\n      ndx.cache && ndx.cache.reset table\r\n      ndx.user = user\r\n      collection = database.collection table\r\n      collection.deleteMany whereObj, null, ->\r\n        asyncCallback (if isServer then 'serverDelete' else 'delete'), \r\n          op: 'delete'\r\n          post: true\r\n          table: table\r\n          user: ndx.user\r\n          isServer: isServer\r\n        cb?()\r\n  )(user or ndx.user) \r\n    \r\nmodule.exports =\r\n  config: (config) ->\r\n    for key of config\r\n      keyU = s(key).underscored().value().toUpperCase()\r\n      settings[keyU] = config[key] or config[keyU] or settings[keyU]\r\n    if settings.ENCRYPT_IGNORE\r\n      encryptIgnore = settings.ENCRYPT_IGNORE\r\n    if settings.ENCRYPT_MONGO\r\n      useEncryption = true\r\n    settings.ENCRYPTION_KEY = settings.ENCRYPTION_KEY or process.env.ENCRYPTION_KEY\r\n    @\r\n  start: ->\r\n    if settings.MONGO_URL\r\n      MongoClient.connect settings.MONGO_URL, settings.MONGO_OPTIONS, (err, db) ->\r\n        if err\r\n          throw err\r\n        database = db\r\n        console.log \"ndx-mongo v#{version} ready\"\r\n        syncCallback 'ready', database\r\n    @\r\n  on: (name, callback) ->\r\n    callbacks[name].push callback\r\n    @\r\n  off: (name, callback) ->\r\n    callbacks[name].splice callbacks[name].indexOf(callback), 1\r\n    @\r\n  select: select\r\n  selectOne: selectOne\r\n  count: count\r\n  update: update\r\n  insert: insert\r\n  upsert: upsert\r\n  delete: del\r\n  bindFns: (user) ->\r\n    select: (table, args, cb, isServer) ->\r\n      select table, args, cb, isServer, user\r\n    selectOne: (table, args, cb, isServer) ->\r\n      selectOne table, args, cb, isServer, user\r\n    count: (table, whereObj, cb) ->\r\n      count table, whereObj, cb\r\n    update: (table, obj, whereObj, cb, isServer) ->\r\n      update table, obj, whereObj, cb, isServer, user\r\n    insert: (table, obj, cb, isServer) ->\r\n      insert table, obj, cb, isServer, user\r\n    upsert: (table, obj, whereObj, cb, isServer) ->\r\n      upsert table, obj, whereObj, cb, isServer, user\r\n    delete: (table, whereObj, cb, isServer) ->\r\n      del table, whereObj, cb, isServer, user\r\n  maintenanceOn: ->\r\n    maintenanceMode = true\r\n  maintenanceOff: ->\r\n    maintenanceMode = false\r\n  version: ->\r\n    version\r\n  maintenance: ->\r\n    maintenanceMode\r\n  setNdx: (_ndx) ->\r\n    ndx = _ndx\r\n    @\r\n  makeSlug: (table, template, data, cb) ->\r\n    slug = s(ndx.fillTemplate(template, data)).prune(30, '').slugify().value()\r\n    if data.slug and data.slug.indexOf(slug) is 0\r\n      return cb true\r\n    testSlug = slug\r\n    outSlug = null\r\n    async.whilst ->\r\n      outSlug is null\r\n    , (callback) =>\r\n      @select table,\r\n        slug: testSlug\r\n      , (results) ->\r\n        if results and results.length\r\n          testSlug = slug + '-' + Math.floor(Math.random() * 9999)\r\n        else\r\n          outSlug = testSlug\r\n        callback null, outSlug\r\n      , true\r\n    , (err, slug) ->\r\n      data.slug = slug\r\n      cb? true\r\n  fieldFromTemplate: (template, data, fieldName) ->\r\n    data[fieldName] = ndx.fillTemplate template, data\r\n  decryptObj: decryptObj\r\n  stats: (cb) ->\r\n    database.command\r\n      dbStats: 1\r\n    , (err, result) ->\r\n      cb err, result\r\n  cacheSize: ->\r\n    0"
  ]
}